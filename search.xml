<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解读《图说区块链》</title>
      <link href="/posts/eb92e5a1.html"/>
      <url>/posts/eb92e5a1.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Sep 18 2019 15:11:37 GMT+0800 (GMT+08:00) --><h1 id="书籍基础脉络"><a href="#书籍基础脉络" class="headerlink" title="书籍基础脉络"></a>书籍基础脉络</h1><h2 id="1-起源篇"><a href="#1-起源篇" class="headerlink" title="1 起源篇"></a>1 起源篇</h2><h3 id="1-1-账本演变：一本账的兴衰发展史"><a href="#1-1-账本演变：一本账的兴衰发展史" class="headerlink" title="1.1 账本演变：一本账的兴衰发展史"></a>1.1 账本演变：一本账的兴衰发展史</h3><blockquote><p>从账本演变的角度来看，区块链是一个<strong>分布式共享</strong>的账本系统。这本账本有以下三个特点：</p><ol><li>可以<strong>无限增加</strong>的巨型账本——每个区块可以视作这个账本的一页，每增加一个区块，账本就多了一页，这一页中可能会包含一条或多条记录信息；</li><li><strong>加密且有顺序</strong>的账本——账目信息会被打包成一个区块并加密，同时盖上时间戳，一个个区块按<strong>时间戳</strong>顺序链接形成一个总账本；</li><li><strong>去中心化</strong>的账本——由网内用户共同维护的，它是去中心化的。</li></ol><p>区块链是人类的记账历史走到现在，科技给我们的最新的选择，它是账本演变史上最新的一个高可行性的形态。</p></blockquote><p>我个人以为区块链可以做到记账的功能是因为人人在场证明。具体的区块链是如何记账的，可以查看<a href="https://www.jianshu.com/p/0c069b865440" target="_blank" rel="noopener">区块链记账原理</a>这篇文章，描述得很清晰。</p><h3 id="1-2-价值转移：互联网之后还有什么"><a href="#1-2-价值转移：互联网之后还有什么" class="headerlink" title="1.2 价值转移：互联网之后还有什么"></a>1.2 价值转移：互联网之后还有什么</h3><blockquote><p>互联网无法传递一类特殊的信息，那就是货币，而区块链恰恰可以解决这样的问题，因为区块链是一种价值传输网络。</p></blockquote><p>在信息爆炸时代，“固然很多信息只需简单地复制粘贴就可以使用，比如视频、图片、声音等，但有些信息是无法复制的，复制后也没有意义。”就比如说支付的钱是无法只是复制给对方，而需要收款账户增加一些钱，付款账号减少等量钱。这个过程也称为价值转移。在这个过程中，转移的操作需要同时得到双方的认可，却又不能受到任一方的操纵。但是谁来保证这样的操作呢？</p><p>目前的互联网协议不支持价值转移功能，而是由一个中心化的第三方来做背书完成价值转移。可以想象这样的场景：假设两个人各自记录了一笔账款，A记录+400，B记录-400，但是3个月后，任意一方可能已经修改了记录的数据，或者直接毁掉记录的数据，那么就会陷入法律纠纷，因为没有第三方证明这份交易记录的真实性。支付宝、微信支付等第三方就起到了背书信用的作用，它们就是所有线上交易的背书中心，它的存在保证了转账交易的完成。</p><p>让人兴奋的是区块链把第三方证明推向了人人在场证明，亦即信用共识。书中表述如下：</p><blockquote><p>区块链技术就这样应运而生了，它可以在没有第三方信用背书的情况下，在一个开放式的平台上进行远距离的安全支付。区块链跨越多个遍布全球各地的节点，保存所有交易的历史记录。而且，网络中所有授权的参与者都保存着一份完全相同的账本，一旦对账本进行修改，全部副本数据也将在几分钟甚至几秒钟内全部修改完毕。分布式账本中的每一笔交易都有一个独一无二的时间戳，这样可以防止重复支付的产生。</p></blockquote><h3 id="1-3-信用成本：你能记住多少人的脸"><a href="#1-3-信用成本：你能记住多少人的脸" class="headerlink" title="1.3 信用成本：你能记住多少人的脸"></a>1.3 信用成本：你能记住多少人的脸</h3><p>这里的信用成本并不是单指现在常说的“cost of credit”，因为后者主要体现在增加银行借贷利率上，而这里的信用成本则更广泛：它还包括交易失败，对方不认账的代价。</p><p>区块链是如何通过人人在场证明解决信任危机的呢？这本书给了回答：</p><blockquote><p>区块链用算法证明机制来保证这份信任。借助它，整个系统中的所有节点能够在信任的环境下自动安全地交换数据。与费时费钱的其他工具技术相比，它能实时自动撮合、强制执行，而且成本很低。</p><p>区块链技术可以很好地满足公信力需求，并把公信力抽象出来作为一个独立的而不是由政府或第三方组织掌控的存在，形成政府、大众、区块链与公信力互相监督的“公信新格局”。信任是建立在区块链上的，而非由单个组织掌控，从而公信力可以被多方交叉验证与监督。</p><p>从信任的角度来看，区块链实际上是用基于共识的数学方法，在机器之间建立信任并完成信用创造。基于这样的特点，其对公信力的提升也有着开创性的意义。《经济学人》杂志这样写道：区块链是一台创造信任的机器，可以说区块链最核心的问题就是解决信用共识的问题。</p></blockquote><h3 id="1-4-技术创新：从比特币到区块链"><a href="#1-4-技术创新：从比特币到区块链" class="headerlink" title="1.4 技术创新：从比特币到区块链"></a>1.4 技术创新：从比特币到区块链</h3><p>区块链是比特币的底层技术。<br>区块链的第一个应用是比特币。<br>2008年，中本聪发表了一篇论文<a href="https://github.com/GammaGao/bitcoinwhitepaper" target="_blank" rel="noopener">比特币：一种点对点的电子现金系统(中文+英文)</a>，有机会去拜读一下。</p><h2 id="2-原理篇"><a href="#2-原理篇" class="headerlink" title="2. 原理篇"></a>2. 原理篇</h2><h3 id="2-1-讲一个故事，什么是区块链"><a href="#2-1-讲一个故事，什么是区块链" class="headerlink" title="2.1 讲一个故事，什么是区块链"></a>2.1 讲一个故事，什么是区块链</h3><p>一个华尔街交易所记账演变的故事……</p><blockquote><p>区块链就是一个分布式的账本，每个节点都可以显示总账，然后维护总账，而且不能篡改账本，除非你控制了超过51%的节点，但这是不可能的。</p></blockquote><h3 id="2-2-讲一下原理，区块链如何运作"><a href="#2-2-讲一下原理，区块链如何运作" class="headerlink" title="2.2 讲一下原理，区块链如何运作"></a>2.2 讲一下原理，区块链如何运作</h3><p>区块链的核心概念：</p><ul><li><p><u>区块是区块链的基本结构单元</u></p><script type="math/tex;mode=display">区块\left\{\begin{aligned}区块头  & ： \text{三组元数据} \\区块主体 &： \text{交易数据}\\\end{aligned}\right.</script><blockquote><p>区块头包含的三组元数据:</p><ol><li>用于连接前面的区块、索引自<strong>父区块哈希值</strong>的数据；</li><li><strong>挖矿难度</strong>、<strong>Nonce</strong>（随机数，用于工作量证明算法的计数器）、<strong>时间戳</strong>；</li><li>能够总结并快速归纳校验区块中所有交易数据的<strong>Merkle（默克尔）树根</strong>数据。</li></ol></blockquote></li><li><p><u>哈希算法</u></p><blockquote><p>哈希算法是区块链中保证交易信息<strong>不被篡改</strong>的<strong>单向</strong>密码机制。哈希算法接收一段明文后，以一种不可逆的方式将其转化为一段<strong>长度较短</strong>、<strong>位数固定</strong>的散列数据。</p><p>在区块链中，通常使用SHA–256（安全散列算法）进行区块加密，这种算法的输入长度为256位，输出的是一串长度为32字节的随机散列数据。</p></blockquote><p>不管原文（明文）是多长的数据，经过哈希算法后呈现的散列数据都是一样长度，而且一旦经过哈希加密后，是无法完成逆向解密的。</p><p>下图是区块链中的哈希算法</p><p><img src="/posts/eb92e5a1/区块链中的哈希算法.png" alt="区块链中的哈希算法"></p></li><li><p><u>公钥与私钥</u><br>公钥是大家都可以用的，通常用来解密/验章<br>私钥是自己拥有的，用来加密/签章</p><blockquote><p>信息发送者：用私钥对信息进行签名，使用信息接收方的公钥对信息加密。<br>信息接收方：用信息发送者的公钥验证信息发送者的身份，使用私钥对加密信息解密。</p></blockquote><p>想象着有一个保险盒子，盒子里面放着交易的东西，这个盒子被上了两层锁：A 的私钥（表明盒子的所有人是 A）和 B 的公钥（加密：只让 B 打开），而要打开这个盒子同样需要两把钥匙：A 的公钥（证明这是 A 的盒子）和 B 的私钥（解密：只有 B 自己能够打开）。这也可以理解使用公钥与私钥是一种非对称加密。</p><blockquote><p>在比特币的系统中，私钥本质上是32个字节组成的数组，公钥和地址的生成都依赖私钥，有了私钥就能生成公钥和地址，就能够花费对应地址上面的比特币。私钥花费比特币的方式就是对这个私钥所对应的未花费的交易进行签名。</p></blockquote></li><li><p><u>时间戳</u></p><blockquote><p>区块链中的时间戳从区块生成的一刻起就存在于区块之中，它对应的是每一次交易记录的<br>认证，证明交易记录的真实性。</p></blockquote><p>时间戳：2019-9-18 01:04<br>因为每一个时间戳都是不一样的，所以包含时间戳的数据计算出来的哈希值一定是不同的。</p></li><li><p><u>Merkle树结构</u></p><blockquote><p>区块链利用Merkle树的数据结构存放所有叶子节点的值，并以此为基础生成一个统一的哈希值。Merkle树的叶子节点存储的是数据信息的哈希值，非叶子的节点存储的是对其下面所有叶子节点的组合进行哈希计算后得出的哈希值</p></blockquote><p>下图为区块链中的 Merkle树结构：<br><img src="/posts/eb92e5a1/区块链中的Merkle树结构.png" alt="区块链中的Merkle树结构"></p></li></ul><h2 id="3-人物篇"><a href="#3-人物篇" class="headerlink" title="3. 人物篇"></a>3. 人物篇</h2><h2 id="4-应用篇"><a href="#4-应用篇" class="headerlink" title="4. 应用篇"></a>4. 应用篇</h2><h2 id="5-装备篇"><a href="#5-装备篇" class="headerlink" title="5. 装备篇"></a>5. 装备篇</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> study notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人网站的建立过程</title>
      <link href="/posts/493539c2.html"/>
      <url>/posts/493539c2.html</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Sep 18 2019 15:11:37 GMT+0800 (GMT+08:00) --><p>想要写一个自己的个人blog，于是在网上找了很多教学，最终确定了建立的方式 Github Pages 和 Hexo，现在写下来做一个回顾和以后的备忘。</p><h2 id="创建个人网站的技术支持"><a href="#创建个人网站的技术支持" class="headerlink" title="创建个人网站的技术支持"></a>创建个人网站的技术支持</h2><p>在网上找到的三篇教学相关链接如下：</p><ol><li><p><a href="（https://blog.csdn.net/qq_36759224/article/details/82121420">使用Github Pages和Hexo搭建自己的独立博客超级详细的小白教程</a></p></li><li><p><a href="https://blog.csdn.net/muzilanlan/article/details/81542917" target="_blank" rel="noopener">Git Pages + Jekyll/Hexo搭建自己的博客(最全总结你想知道的都在这里了)</a></p></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】</a></li></ol><h2 id="撰写文章"><a href="#撰写文章" class="headerlink" title="撰写文章"></a>撰写文章</h2><p>小白忘性大，写下如何将本地写好的文件发到个人blog上的步骤，以后才不会忘记了还要翻教学网页。</p><ul><li>用 markdown 编辑器（我用的是atom）写好文章后保存文件到 \Hexo\source_posts 文件夹下即可，文章名称是 .md 的后缀</li><li>或者在\Hexo\source_posts 文件夹下右键，选中 Git Bash Here，输入 <code>hexo new &quot;文章标题&quot;</code>，就会产生新的 .md 文档。</li></ul><h2 id="发布文章（亦即更新个人博客）"><a href="#发布文章（亦即更新个人博客）" class="headerlink" title="发布文章（亦即更新个人博客）"></a>发布文章（亦即更新个人博客）</h2><ol><li><p>将本地文档 .md 推送到服务器上的步骤： \Hexo\source_posts 文件夹下右键，选中 Git Bash Here，输入<code>hexo g</code> (完整命令为<code>hexo generate</code>)，用于生成静态文件</p></li><li><p>然后 输入<code>hexo s</code>(完整命令为<code>hexo server</code>)，用于启动服务器，主要用来本地预览；完成后当出现了<code>【INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code>】后便可以打开浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">localhost:4000</a>，会发现多了你刚写的那篇博客</p></li><li><p>最后输入<code>hexo d</code>(完整命令为<code>hexo deploy</code>)，用于将本地文件发布到 github 等 git 仓库上；</p></li></ol><p>好了，大功告成！</p><h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><ol><li>删除\Hexo\source_posts 文件夹下.md 后缀的源文件</li><li>只有删除md文档是无法同步完全删除个人网站上的文章，还需要进一步操作：在\Hexo文件下右键，选中 Git Bash Here，输入<code>hexo clean</code> ，用于删除 database 和 public文件</li><li>回到\Hexo\source_posts 文件夹下，进行前述更新个人博客的步骤，就可完成网络界面更新了。</li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
